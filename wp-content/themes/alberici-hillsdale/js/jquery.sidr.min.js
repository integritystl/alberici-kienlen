/*! sidr - v2.2.1 - 2016-02-17
 * http://www.berriart.com/sidr/
 * Copyright (c) 2013-2016 Alberto Varela; Licensed MIT */
!(function () {
  function a(a, b, c) { const d = new o(b); switch (a) { case 'open': d.open(c); break; case 'close': d.close(c); break; case 'toggle': d.toggle(c); break; default: p.error(`Method ${a} does not exist on jQuery.sidr`); } } function b(a) { return a === 'status' ? h : s[a] ? s[a].apply(this, Array.prototype.slice.call(arguments, 1)) : typeof a !== 'function' && typeof a !== 'string' && a ? void q.error(`Method ${a} does not exist on jQuery.sidr`) : s.toggle.apply(this, arguments); } function c(a, b) { if (typeof b.source === 'function') { const c = b.source(name); a.html(c); } else if (typeof b.source === 'string' && i.isUrl(b.source))u.get(b.source, (b) => { a.html(b); }); else if (typeof b.source === 'string') { let d = ''; const e = b.source.split(','); if (u.each(e, (a, b) => { d += `<div class="sidr-inner">${u(b).html()}</div>`; }), b.renaming) { const f = u('<div />').html(d); f.find('*').each((a, b) => { const c = u(b); i.addPrefixes(c); }), d = f.html(); }a.html(d); } else b.source !== null && u.error('Invalid Sidr Source'); return a; } function d(a) {
    const d = i.transitions; const e = u.extend({
      name: 'sidr', speed: 200, side: 'left', source: null, renaming: !0, body: 'body', displace: !0, timing: 'ease', method: 'toggle', bind: 'touchstart click', onOpen() {}, onClose() {}, onOpenEnd() {}, onCloseEnd() {},
    }, a); const f = e.name; let g = u(`#${f}`); return g.length === 0 && (g = u('<div />').attr('id', f).appendTo(u('body'))), d.supported && g.css(d.property, `${e.side} ${e.speed / 1e3}s ${e.timing}`), g.addClass('sidr').addClass(e.side).data({
      speed: e.speed, side: e.side, body: e.body, displace: e.displace, timing: e.timing, method: e.method, onOpen: e.onOpen, onClose: e.onClose, onOpenEnd: e.onOpenEnd, onCloseEnd: e.onCloseEnd,
    }), g = c(g, e), this.each(function () { const a = u(this); const c = a.data('sidr'); let d = !1; c || (h.moving = !1, h.opened = !1, a.data('sidr', f), a.bind(e.bind, (a) => { a.preventDefault(), d || (d = !0, b(e.method, f), setTimeout(() => { d = !1; }, 100)); })); });
  } const e = {}; e.classCallCheck = function (a, b) { if (!(a instanceof b)) throw new TypeError('Cannot call a class as a function'); }, e.createClass = (function () { function a(a, b) { for (let c = 0; c < b.length; c++) { const d = b[c]; d.enumerable = d.enumerable || !1, d.configurable = !0, 'value' in d && (d.writable = !0), Object.defineProperty(a, d.key, d); } } return function (b, c, d) { return c && a(b.prototype, c), d && a(b, d), b; }; }()); let f; let g; var h = { moving: !1, opened: !1 }; var i = {
    isUrl(a) { const b = new RegExp('^(https?:\\/\\/)?((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.?)+[a-z]{2,}|((\\d{1,3}\\.){3}\\d{1,3}))(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*(\\?[;&a-z\\d%_.~+=-]*)?(\\#[-a-z\\d_]*)?$', 'i'); return b.test(a) ? !0 : !1; }, addPrefixes(a) { this.addPrefix(a, 'id'), this.addPrefix(a, 'class'), a.removeAttr('style'); }, addPrefix(a, b) { const c = a.attr(b); typeof c === 'string' && c !== '' && c !== 'sidr-inner' && a.attr(b, c.replace(/([A-Za-z0-9_.\-]+)/g, `sidr-${b}-$1`)); }, transitions: (function () { const a = document.body || document.documentElement; const b = a.style; let c = !1; let d = 'transition'; return d in b ? c = !0 : !(function () { const a = ['moz', 'webkit', 'o', 'ms']; let e = void 0; let f = void 0; d = d.charAt(0).toUpperCase() + d.substr(1), c = (function () { for (f = 0; f < a.length; f++) if (e = a[f], e + d in b) return !0; return !1; }()), d = c ? `-${e.toLowerCase()}-${d.toLowerCase()}` : null; }()), { supported: c, property: d }; }()),
  }; const j = jQuery; const k = 'sidr-animating'; const l = 'open'; const m = 'close'; const n = 'webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend'; var o = (function () {
    function a(b) { e.classCallCheck(this, a), this.name = b, this.item = j(`#${b}`), this.openClass = b === 'sidr' ? 'sidr-open' : `sidr-open ${b}-open`, this.menuWidth = this.item.outerWidth(!0), this.speed = this.item.data('speed'), this.side = this.item.data('side'), this.displace = this.item.data('displace'), this.timing = this.item.data('timing'), this.method = this.item.data('method'), this.onOpenCallback = this.item.data('onOpen'), this.onCloseCallback = this.item.data('onClose'), this.onOpenEndCallback = this.item.data('onOpenEnd'), this.onCloseEndCallback = this.item.data('onCloseEnd'), this.body = j(this.item.data('body')); } return e.createClass(a, [{ key: 'getAnimation', value(a, b) { const c = {}; const d = this.side; return a === 'open' && b === 'body' ? c[d] = `${this.menuWidth}px` : a === 'close' && b === 'menu' ? c[d] = `-${this.menuWidth}px` : c[d] = 0, c; } }, { key: 'prepareBody', value(a) { const b = a === 'open' ? 'hidden' : ''; if (this.body.is('body')) { const c = j('html'); const d = c.scrollTop(); c.css('overflow-x', b).scrollTop(d); } } }, { key: 'openBody', value() { if (this.displace) { const a = i.transitions; const b = this.body; if (a.supported)b.css(a.property, `${this.side} ${this.speed / 1e3}s ${this.timing}`).css(this.side, 0).css({ width: b.width(), position: 'absolute' }), b.css(this.side, `${this.menuWidth}px`); else { const c = this.getAnimation(l, 'body'); b.css({ width: b.width(), position: 'absolute' }).animate(c, { queue: !1, duration: this.speed }); } } } }, {
      key: 'onCloseBody',
      value() {
        const a = i.transitions; const b = {
          width: '', position: '', right: '', left: '',
        }; a.supported && (b[a.property] = ''), this.body.css(b).unbind(n);
      },
    }, { key: 'closeBody', value() { const a = this; if (this.displace) if (i.transitions.supported) this.body.css(this.side, 0).one(n, () => { a.onCloseBody(); }); else { const b = this.getAnimation(m, 'body'); this.body.animate(b, { queue: !1, duration: this.speed, complete() { a.onCloseBody(); } }); } } }, { key: 'moveBody', value(a) { a === l ? this.openBody() : this.closeBody(); } }, { key: 'onOpenMenu', value(a) { const b = this.name; h.moving = !1, h.opened = b, this.item.unbind(n), this.body.removeClass(k).addClass(this.openClass), this.onOpenEndCallback(), typeof a === 'function' && a(b); } }, { key: 'openMenu', value(a) { const b = this; const c = this.item; if (i.transitions.supported)c.css(this.side, 0).one(n, () => { b.onOpenMenu(a); }); else { const d = this.getAnimation(l, 'menu'); c.css('display', 'block').animate(d, { queue: !1, duration: this.speed, complete() { b.onOpenMenu(a); } }); } } }, { key: 'onCloseMenu', value(a) { this.item.css({ left: '', right: '' }).unbind(n), j('html').css('overflow-x', ''), h.moving = !1, h.opened = !1, this.body.removeClass(k).removeClass(this.openClass), this.onCloseEndCallback(), typeof a === 'function' && a(name); } }, { key: 'closeMenu', value(a) { const b = this; const c = this.item; if (i.transitions.supported)c.css(this.side, '').one(n, () => { b.onCloseMenu(a); }); else { const d = this.getAnimation(m, 'menu'); c.animate(d, { queue: !1, duration: this.speed, complete() { b.onCloseMenu(); } }); } } }, { key: 'moveMenu', value(a, b) { this.body.addClass(k), a === l ? this.openMenu(b) : this.closeMenu(b); } }, { key: 'move', value(a, b) { h.moving = !0, this.prepareBody(a), this.moveBody(a), this.moveMenu(a, b); } }, { key: 'open', value(b) { const c = this; if (h.opened !== this.name && !h.moving) { if (h.opened !== !1) { const d = new a(h.opened); return void d.close(() => { c.open(b); }); } this.move('open', b), this.onOpenCallback(); } } }, { key: 'close', value(a) { h.opened !== this.name || h.moving || (this.move('close', a), this.onCloseCallback()); } }, { key: 'toggle', value(a) { h.opened === this.name ? this.close(a) : this.open(a); } }]), a;
  }()); var p = jQuery; var q = jQuery; const r = ['open', 'close', 'toggle']; var s = {}; const t = function (b) { return function (c, d) { typeof c === 'function' ? (d = c, c = 'sidr') : c || (c = 'sidr'), a(b, c, d); }; }; for (f = 0; f < r.length; f++)g = r[f], s[g] = t(g); var u = jQuery; jQuery.sidr = b, jQuery.fn.sidr = d;
}());
