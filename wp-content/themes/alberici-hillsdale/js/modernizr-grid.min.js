/*! modernizr 3.6.0 (Custom Build) | MIT *
 * https://modernizr.com/download/?-cssgrid_cssgridlegacy-setclasses ! */
!(function (e, n, t) {
  function r(e, n) { return typeof e === n; } function o() { let e; let n; let t; let o; let s; let i; let l; for (const a in w) if (w.hasOwnProperty(a)) { if (e = [], n = w[a], n.name && (e.push(n.name.toLowerCase()), n.options && n.options.aliases && n.options.aliases.length)) for (t = 0; t < n.options.aliases.length; t++)e.push(n.options.aliases[t].toLowerCase()); for (o = r(n.fn, 'function') ? n.fn() : n.fn, s = 0; s < e.length; s++)i = e[s], l = i.split('.'), l.length === 1 ? Modernizr[l[0]] = o : (!Modernizr[l[0]] || Modernizr[l[0]] instanceof Boolean || (Modernizr[l[0]] = new Boolean(Modernizr[l[0]])), Modernizr[l[0]][l[1]] = o), C.push((o ? '' : 'no-') + l.join('-')); } } function s(e) { let n = _.className; const t = Modernizr._config.classPrefix || ''; if (x && (n = n.baseVal), Modernizr._config.enableJSClass) { const r = new RegExp(`(^|\\s)${t}no-js(\\s|$)`); n = n.replace(r, `$1${t}js$2`); }Modernizr._config.enableClasses && (n += ` ${t}${e.join(` ${t}`)}`, x ? _.className.baseVal = n : _.className = n); } function i(e, n) { return !!~(`${e}`).indexOf(n); } function l() { return typeof n.createElement !== 'function' ? n.createElement(arguments[0]) : x ? n.createElementNS.call(n, 'http://www.w3.org/2000/svg', arguments[0]) : n.createElement(...arguments); } function a(e) { return e.replace(/([a-z])-([a-z])/g, (e, n, t) => n + t.toUpperCase()).replace(/^-/, ''); } function u(e, n) { return function () { return e.apply(n, arguments); }; } function f(e, n, t) { let o; for (const s in e) if (e[s] in n) return t === !1 ? e[s] : (o = n[e[s]], r(o, 'function') ? u(o, t || n) : o); return !1; } function c(e) { return e.replace(/([A-Z])/g, (e, n) => `-${n.toLowerCase()}`).replace(/^ms-/, '-ms-'); } function d(n, t, r) { let o; if ('getComputedStyle' in e) { o = getComputedStyle.call(e, n, t); const s = e.console; if (o !== null)r && (o = o.getPropertyValue(r)); else if (s) { const i = s.error ? 'error' : 'log'; s[i].call(s, 'getComputedStyle returning null, its possible modernizr test results are inaccurate'); } } else o = !t && n.currentStyle && n.currentStyle[r]; return o; } function p() { let e = n.body; return e || (e = l(x ? 'svg' : 'body'), e.fake = !0), e; } function m(e, t, r, o) { let s; let i; let a; let u; const f = 'modernizr'; const c = l('div'); const d = p(); if (parseInt(r, 10)) for (;r--;)a = l('div'), a.id = o ? o[r] : f + (r + 1), c.appendChild(a); return s = l('style'), s.type = 'text/css', s.id = `s${f}`, (d.fake ? d : c).appendChild(s), d.appendChild(c), s.styleSheet ? s.styleSheet.cssText = e : s.appendChild(n.createTextNode(e)), c.id = f, d.fake && (d.style.background = '', d.style.overflow = 'hidden', u = _.style.overflow, _.style.overflow = 'hidden', _.appendChild(d)), i = t(c, e), d.fake ? (d.parentNode.removeChild(d), _.style.overflow = u, _.offsetHeight) : c.parentNode.removeChild(c), !!i; } function g(n, r) { let o = n.length; if ('CSS' in e && 'supports' in e.CSS) { for (;o--;) if (e.CSS.supports(c(n[o]), r)) return !0; return !1; } if ('CSSSupportsRule' in e) { for (var s = []; o--;)s.push(`(${c(n[o])}:${r})`); return s = s.join(' or '), m(`@supports (${s}) { #modernizr { position: absolute; } }`, e => d(e, null, 'position') == 'absolute'); } return t; } function y(e, n, o, s) { function u() { c && (delete N.style, delete N.modElem); } if (s = r(s, 'undefined') ? !1 : s, !r(o, 'undefined')) { const f = g(e, o); if (!r(f, 'undefined')) return f; } for (var c, d, p, m, y, v = ['modernizr', 'tspan', 'samp']; !N.style && v.length;)c = !0, N.modElem = l(v.shift()), N.style = N.modElem.style; for (p = e.length, d = 0; p > d; d++) if (m = e[d], y = N.style[m], i(m, '-') && (m = a(m)), N.style[m] !== t) { if (s || r(o, 'undefined')) return u(), n == 'pfx' ? m : !0; try { N.style[m] = o; } catch (h) {} if (N.style[m] != y) return u(), n == 'pfx' ? m : !0; } return u(), !1; } function v(e, n, t, o, s) { const i = e.charAt(0).toUpperCase() + e.slice(1); let l = (`${e} ${P.join(`${i} `)}${i}`).split(' '); return r(n, 'string') || r(n, 'undefined') ? y(l, n, o, s) : (l = (`${e} ${z.join(`${i} `)}${i}`).split(' '), f(l, n, t)); } function h(e, n, r) { return v(e, t, t, n, r); } var C = []; var w = []; const S = {
    _version: '3.6.0',
    _config: {
      classPrefix: '', enableClasses: !0, enableJSClass: !0, usePrefixes: !0,
    },
    _q: [],
    on(e, n) { const t = this; setTimeout(() => { n(t[e]); }, 0); },
    addTest(e, n, t) { w.push({ name: e, fn: n, options: t }); },
    addAsyncTest(e) { w.push({ name: null, fn: e }); },
  }; var Modernizr = function () {}; Modernizr.prototype = S, Modernizr = new Modernizr(); var _ = n.documentElement; var x = _.nodeName.toLowerCase() === 'svg'; const b = 'Moz O ms Webkit'; var P = S._config.usePrefixes ? b.split(' ') : []; S._cssomPrefixes = P; var z = S._config.usePrefixes ? b.toLowerCase().split(' ') : []; S._domPrefixes = z; const E = { elem: l('modernizr') }; Modernizr._q.push(() => { delete E.elem; }); var N = { style: E.elem.style }; Modernizr._q.unshift(() => { delete N.style; }), S.testAllProps = v, S.testAllProps = h, Modernizr.addTest('cssgridlegacy', h('grid-columns', '10px', !0)), Modernizr.addTest('cssgrid', h('grid-template-rows', 'none', !0)), o(), s(C), delete S.addTest, delete S.addAsyncTest; for (let T = 0; T < Modernizr._q.length; T++)Modernizr._q[T](); e.Modernizr = Modernizr;
}(window, document));
